import com.biorecorder.data.utils.IntComparator;
import com.biorecorder.data.utils.PrimitiveUtils;
import com.biorecorder.data.utils.SortAlgorithm;
import com.biorecorder.data.utils.Swapper;

/**
 * Based on:
 * <br><a href="https://github.com/phishman3579/java-algorithms-implementation/blob/master/src/com/jwetherell/algorithms/search/UpperBound.java">github UpperBound.java</a>
 * <br><a href="https://github.com/phishman3579/java-algorithms-implementation/blob/master/src/com/jwetherell/algorithms/search/LowerBound.java">github LowerBound.java</a>
 * <br><a href="https://rosettacode.org/wiki/Binary_search">Binary search</a>
 */
public class SequenceUtils {
    static class ArrSwapper implements Swapper {
        private int[] arr;
        public ArrSwapper(int[] arr) {
            this.arr = arr;
        }
        @Override
        public void swap(int index1, int index2) {
            int v1 = arr[index1];
            int v2 = arr[index2];
            arr[index1] = v2;
            arr[index2] = v1;
        }
    }


/******************************************************************
*                             SORT
******************************************************************/
#REPLICATED0#
/******************************************************************
*                         BINARY SEARCH
******************************************************************/
#REPLICATED1#

#REPLICATED2#

#REPLICATED3#

====START_REPLICATED_CONTENT #0====

    /**
     * This method do not modifying the order of the underlying data!
     * It simply returns an array of sorted indexes which represent sorted version (view)
     * of the data.
     * @return array of sorted indexes. So that data.get(sorted[i]) will be sorted for i = 0, 1,..., length - 1
     */
    public static int[] sort(#E#Sequence data, int from, int length, boolean isParallel) {
        int[] orderedIndexes = new int[length];

        for (int i = 0; i < length; i++) {
            orderedIndexes[i]  = i + from;
        }

        IntComparator comparator = new IntComparator() {
            @Override
            public int compare(int index1, int index2) {
                return Integer.compare(data.get(orderedIndexes[index1]), data.get(orderedIndexes[index2]));
            }
        };

        SortAlgorithm.getDefault(isParallel).sort(0, length, comparator, new ArrSwapper(orderedIndexes));

        return orderedIndexes;
    }
=====END_REPLICATED_CONTENT #0=====

====START_REPLICATED_CONTENT #1====
    /**
     * Binary search algorithm. The sequence must be sorted!
     * Find the index of the <b>value</b>. If data sequence contains
     * multiple elements equal to the searched <b>value</b>, there is no guarantee which
     * one will be found. If there is no element equal to the searched value function returns
     * the insertion point for <b>value</b> in the data sequence to maintain sorted order
     * (i.e. index of any element that is equal the searched value or
     * index of the first element which is bigger than the searched value.
     */
    public static int bisect(#E#Sequence data, #e# value, int fromIndex, int length) {
        int low = fromIndex;
        int high = fromIndex + length;
        while (low < high) {
            int mid = (low + high) >>> 1; // the same as (low + high) / 2
            if (#ET#.compare(value, data.get(mid)) > 0) {
                low = mid + 1;
            } else if (#ET#.compare(value, data.get(mid)) < 0) {
                high = mid;
            } else { //  Values are equal but for float and double additional checks is needed
                return mid; // Key found
            }
        }
        return low;  // key not found.
    }
=====END_REPLICATED_CONTENT #1=====

====START_REPLICATED_CONTENT #2====
    /**
     * Binary search algorithm. The sequence must be sorted!
     * Finds the insertion point for <b>value</b> in the data sequence to maintain sorted order.
     * If <b>value</b> is already present in data sequence, the insertion point
     * will be BEFORE (to the left of) any existing entries.
     * Returns index such that: data.get(index - 1) < value <= data.get(index)
     */
    public static int bisectLeft(#E#Sequence data, #e# value, int from, int length) {
        int low = from;
        int high = from + length;
        while (low < high) {
            final int mid = (low + high) >>> 1; // the same as (low + high) / 2
            if (#ET#.compare(value, data.get(mid)) <= 0) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
=====END_REPLICATED_CONTENT #2=====

====START_REPLICATED_CONTENT #3====
    /**
     * Binary search algorithm. The sequence must be sorted!
     * Finds the insertion point for <b>value</b> in the data sequence to maintain sorted order.
     * If <b>value</b> is already present in data sequence, the insertion point
     * will be AFTER (to the right of) any existing entries.
     * Returns index such that: data.get(index - 1) <= value < data.get(index)
     */
    public static int bisectRight(#E#Sequence data, #e# value, int from, int length) {
        int low = from;
        int high = from + length;
        while (low < high) {
            final int mid = (low + high) >>> 1; // the same as (low + high) / 2
            if (#ET#.compare(value, data.get(mid)) >= 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }
=====END_REPLICATED_CONTENT #3=====

}

